plugins {
    id 'java'
    id("xyz.jpenilla.run-paper") version "2.3.1"
}

group = 'com'
version = '1.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven {
        name = "papermc"
        url = uri("https://repo.papermc.io/repository/maven-public/")
    }
    maven {
        name = "fancyplugins-releases"
        url = uri("https://repo.fancyplugins.de/releases")
    }
    maven {
        name = "dmulloy2-repo"
        url = uri("https://repo.dmulloy2.net/repository/public/")
    }
}

dependencies {
    compileOnly("io.papermc.paper:paper-api:1.21.6-R0.1-SNAPSHOT")
    compileOnly("de.oliver:FancyHolograms:2.5.0")
    compileOnly("com.comphenix.protocol:ProtocolLib:5.3.0")
}

tasks {
  runServer {
    // Configure the Minecraft version for our task.
    // This is the only required configuration besides applying the plugin.
    // Your plugin's jar (or shadowJar if present) will be used automatically.
    minecraftVersion("1.21")
  }
}

def targetJavaVersion = 21
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}

def serverPluginsDir = file("C:/Users/Malik/Desktop/Server/plugins")
def pluginJarName = "sebxstt-${version}.jar"

tasks.register("copyToServer", Copy) {
    dependsOn "build"
    from("$buildDir/libs/$pluginJarName")
    into(serverPluginsDir)
    doFirst {
        println "Copiando $pluginJarName a $serverPluginsDir"
    }
    doLast {
        println "Plugin copiado correctamente."
    }
}

tasks.register("runServerJar", Exec) {
    dependsOn "copyToServer"
    workingDir = file("C:/Users/Malik/Desktop/Server")

    commandLine = [
            "java",
            "-Xms512M", "-Xmx1G",
            "-XX:+UseG1GC",
            "-XX:+ParallelRefProcEnabled",
            "-XX:MaxGCPauseMillis=200",
            "-XX:+UnlockExperimentalVMOptions",
            "-XX:+DisableExplicitGC",
            "-XX:+AlwaysPreTouch",
            "-XX:G1NewSizePercent=30",
            "-XX:G1MaxNewSizePercent=40",
            "-XX:G1HeapRegionSize=8M",
            "-XX:G1ReservePercent=20",
            "-XX:G1HeapWastePercent=5",
            "-XX:G1MixedGCCountTarget=4",
            "-XX:InitiatingHeapOccupancyPercent=15",
            "-XX:G1MixedGCLiveThresholdPercent=90",
            "-XX:G1RSetUpdatingPauseTimePercent=5",
            "-XX:SurvivorRatio=32",
            "-XX:+PerfDisableSharedMem",
            "-XX:MaxTenuringThreshold=1",
            "-XX:ParallelGCThreads=2",
            "-XX:ConcGCThreads=1",
            "-jar", "server.jar", "--nogui"
    ]

    ignoreExitValue = true

    doFirst {
        println "Verificando si el puerto 25565 está en uso..."
        try {
            def result = ["cmd", "/c", "netstat -ano | findstr :25565"].execute()
            def output = result.text.trim()
            if (!output.isEmpty()) {
                def line = output.readLines().find { it.contains("LISTENING") || it.contains("ESTABLISHED") }
                if (line) {
                    def pid = line.tokenize().last()
                    println "⚠ Puerto 25565 está en uso por PID: $pid. Terminando proceso..."
                    def kill = ["cmd", "/c", "taskkill /PID $pid /F"].execute()
                    kill.waitFor()
                    println "Proceso $pid terminado."
                    Thread.sleep(2000)
                }
            } else {
                println "Puerto 25565 libre."
            }
        } catch (Exception e) {
            println "No se pudo verificar el puerto 25565: ${e.message}"
        }

        println "Ejecutando server.jar con configuración avanzada JVM"
    }

    doLast {
        println "Servidor detenido (esto no es un error real)"
    }
}
